#!/usr/bin/env node

var assert = require('assert');

var program = require('commander')
  .version(require('../package.json').version)
  .usage('<name>')
  .option('-o, --org <name>', 'github owner/organization name')
  .option('-n, --npm <name>', 'npm package name')
  .parse(process.argv)

var mkdirp = require('mkdirp')
var path = require('path')
var fs = require('fs')

var name = program.args[0]
assert(name, 'no name defined')
var owner = program.org || 'jonathanong'
var repository = owner + '/' + name
var npm = program.npm || name

fs.mkdirSync(name)

var assets = path.join(__dirname, '..', 'assets')

// gitignore
fs.writeFileSync(path.join(name, '.gitignore'), fs.readFileSync(path.join(assets, 'gitignore')))

// eslintrc
fs.writeFileSync(path.join(name, '.eslintrc'), fs.readFileSync(path.join(assets, 'eslintrc')))

// travis
var travis = fs.readFileSync(path.join(assets, 'travis.yml'), 'utf8')
fs.writeFileSync(path.join(name, '.travis.yml'), travis)

// package.json
var package = require('../assets/package.json')
package.name = npm
package.repository = repository
fs.writeFileSync(path.join(name, 'package.json'), JSON.stringify(package, null, 2))

var license = fs.readFileSync(path.join(assets, 'LICENSE'), 'utf8')
var readme = fs.readFileSync(path.join(assets, 'README.md'), 'utf8')
fs.writeFileSync(path.join(name, 'LICENSE'), replace(license))
fs.writeFileSync(path.join(name, 'README.md'), replace(readme))

// folders
mkdirp.sync(path.join(name, 'lib'))
mkdirp.sync(path.join(name, 'test'))
fs.writeFileSync(path.join(name, 'lib', 'index.js'), '')
fs.writeFileSync(path.join(name, 'test', 'index.js'), '')

// eslint file for tests
fs.writeFileSync(path.join(name, 'test', '.eslintrc'), JSON.stringify({
  env: {
    mocha: true
  },
  rules: {
    "max-nested-callbacks": 0
  }
}, null, 2))

function replace(string) {
  return string
    .replace(/\{\{name\}\}/g, name)
    .replace(/\{\{npm\}\}/g, npm)
    .replace(/\{\{repository\}\}/g, repository)
    .replace(/\{\{year\}\}/g, new Date().getFullYear())
}
